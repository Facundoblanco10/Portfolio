---
interface Props {
  tabs: Tab[];
  classes?: string;
}
interface Tab {
  id: string;
  title: string;
  content: string;
  active: boolean;
  image?: string;
  classes?: string;
}

const { tabs, classes } = Astro.props;

const baseClasses =
  "p-6 bg-white border border-secondary-600 rounded-lg shadow dark:bg-secondary-800 dark:border-secondary-700";

const combinedClasses = `${baseClasses} ${classes}`;

// Funci√≥n para convertir URLs en enlaces HTML
function convertUrlsToLinks(text: string) {
  const urlPattern = /(https?:\/\/[^\s]+)/g;
  return text.replace(
    urlPattern,
    '<a href="$1" target="_blank" class="text-blue-600 hover:underline">$1</a>'
  );
}
---

<div class={combinedClasses}>
  <ul
    class="flex flex-wrap text-sm gap-x-4 gap-y-2 font-medium text-center justify-center text-gray-500 border-b border-gray-200 rounded-t-lg bg-gray-50 dark:border-secondary-800 dark:text-gray-400 dark:bg-secondary-800"
    id="defaultTab"
    role="tablist"
  >
    {
      tabs.map((tab) => (
        <li class="me-2">
          <button
            id={`${tab.id}-tab`}
            data-tabs-target={`#${tab.id}`}
            type="button"
            role="tab"
            aria-controls={tab.id}
            aria-selected={tab.active ? "true" : "false"}
            class={`tab-button inline-block rounded-ss-lg hover:bg-gray-100 text-lg dark:hover:bg-secondary-800 ${tab.active ? "text-primary dark:bg-secondary-800 dark:text-primary" : "hover:text-gray-600 dark:hover:text-gray-300"}`}
          >
            {tab.title}
          </button>
        </li>
      ))
    }
  </ul>
  <div id="defaultTabContent">
    {
      tabs.map((tab) => (
        <div
          class={`tab-content p-4 bg-white rounded-lg dark:bg-secondary-800 ${tab.active ? "" : "hidden"}`}
          id={tab.id}
          role="tabpanel"
          aria-labelledby={`${tab.id}-tab`}
        >
          <div>
            {tab.image && (
              <img
                src={tab.image}
                alt={`${tab.title} image`}
                class="max-w-[28svw] block rounded-lg object-cover w-36 float-right ml-4 mb-2 border border-secondary-600 dark:border-secondary-700"
              />
            )}
            <h2 class="mb-3 text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white">
              {tab.title}
            </h2>
            <p
              class="font-normal text-gray-700 dark:text-gray-400"
              set:html={tab.content}
            />
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tabButtons = document.querySelectorAll(".tab-button");
    const tabContents = document.querySelectorAll(".tab-content");

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        // Remove active classes from all buttons and contents
        tabButtons.forEach((btn) => {
          btn.classList.remove(
            "text-primary",
            "dark:bg-secondary-800",
            "dark:text-primary"
          );
          btn.classList.add("hover:text-gray-600", "dark:hover:text-gray-300");
          btn.setAttribute("aria-selected", "false");
        });
        tabContents.forEach((content) => content.classList.add("hidden"));

        // Add active classes to the clicked button and its corresponding content
        button.classList.add(
          "text-primary",
          "dark:bg-secondary-800",
          "dark:text-primary"
        );
        button.classList.remove(
          "hover:text-gray-600",
          "dark:hover:text-gray-300"
        );
        button.setAttribute("aria-selected", "true");
        const targetId = button.getAttribute("data-tabs-target");
        if (!targetId) return;
        document.querySelector(targetId)?.classList.remove("hidden");
      });
    });
  });
</script>
